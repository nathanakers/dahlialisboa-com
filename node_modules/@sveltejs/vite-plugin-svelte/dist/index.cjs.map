{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/log.ts", "../src/handle-hot-update.ts", "../src/utils/compile.ts", "../src/utils/hash.ts", "../src/utils/id.ts", "../src/utils/load-svelte-config.ts", "../src/utils/preprocess.ts", "../src/utils/options.ts", "../src/utils/vite-plugin-svelte-cache.ts", "../src/utils/constants.ts", "../src/utils/watch.ts", "../src/utils/resolve.ts"],
  "sourcesContent": ["import { HmrContext, IndexHtmlTransformContext, ModuleNode, Plugin, UserConfig } from 'vite';\nimport { handleHotUpdate } from './handle-hot-update';\nimport { log, logCompilerWarnings } from './utils/log';\nimport { CompileData, createCompileSvelte } from './utils/compile';\nimport { buildIdParser, IdParser, SvelteRequest } from './utils/id';\nimport {\n\tvalidateInlineOptions,\n\tOptions,\n\tResolvedOptions,\n\tresolveOptions,\n\tPreprocessorGroup\n} from './utils/options';\nimport { VitePluginSvelteCache } from './utils/vite-plugin-svelte-cache';\n\nimport { SVELTE_IMPORTS, SVELTE_RESOLVE_MAIN_FIELDS } from './utils/constants';\nimport { setupWatchers } from './utils/watch';\nimport { resolveViaPackageJsonSvelte } from './utils/resolve';\n\n// extend the Vite plugin interface to be able to have `sveltePreprocess` injection\ndeclare module 'vite' {\n\t// eslint-disable-next-line no-unused-vars\n\tinterface Plugin {\n\t\tsveltePreprocess?: PreprocessorGroup;\n\t}\n}\n\nexport function svelte(inlineOptions?: Partial<Options>): Plugin {\n\tif (process.env.DEBUG != null) {\n\t\tlog.setLevel('debug');\n\t}\n\tvalidateInlineOptions(inlineOptions);\n\tconst cache = new VitePluginSvelteCache();\n\tconst pkg_export_errors = new Set();\n\t// updated in configResolved hook\n\tlet requestParser: IdParser;\n\tlet options: ResolvedOptions;\n\n\t/* eslint-disable no-unused-vars */\n\tlet compileSvelte: (\n\t\tsvelteRequest: SvelteRequest,\n\t\tcode: string,\n\t\toptions: Partial<ResolvedOptions>\n\t) => Promise<CompileData>;\n\t/* eslint-enable no-unused-vars */\n\n\treturn {\n\t\tname: 'vite-plugin-svelte',\n\t\t// make sure our resolver runs before vite internal resolver to resolve svelte field correctly\n\t\tenforce: 'pre',\n\t\tconfig(config): Partial<UserConfig> {\n\t\t\t// setup logger\n\t\t\tif (process.env.DEBUG) {\n\t\t\t\tlog.setLevel('debug');\n\t\t\t} else if (config.logLevel) {\n\t\t\t\tlog.setLevel(config.logLevel);\n\t\t\t}\n\n\t\t\t// extra vite config\n\t\t\tconst extraViteConfig: Partial<UserConfig> = {\n\t\t\t\toptimizeDeps: {\n\t\t\t\t\texclude: [...SVELTE_IMPORTS]\n\t\t\t\t},\n\t\t\t\tresolve: {\n\t\t\t\t\tmainFields: [...SVELTE_RESOLVE_MAIN_FIELDS],\n\t\t\t\t\tdedupe: [...SVELTE_IMPORTS]\n\t\t\t\t}\n\t\t\t};\n\t\t\t// needed to transform svelte files with component imports\n\t\t\t// can cause issues with other typescript files, see https://github.com/sveltejs/vite-plugin-svelte/pull/20\n\t\t\tif (inlineOptions?.useVitePreprocess) {\n\t\t\t\textraViteConfig.esbuild = {\n\t\t\t\t\ttsconfigRaw: {\n\t\t\t\t\t\tcompilerOptions: {\n\t\t\t\t\t\t\timportsNotUsedAsValues: 'preserve'\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}\n\t\t\tlog.debug('additional vite config', extraViteConfig);\n\t\t\treturn extraViteConfig as Partial<UserConfig>;\n\t\t},\n\n\t\tasync configResolved(config) {\n\t\t\toptions = await resolveOptions(inlineOptions, config);\n\t\t\trequestParser = buildIdParser(options);\n\t\t\tcompileSvelte = createCompileSvelte(options);\n\t\t},\n\n\t\tconfigureServer(server) {\n\t\t\t// eslint-disable-next-line no-unused-vars\n\t\t\toptions.server = server;\n\t\t\tsetupWatchers(server, cache, requestParser);\n\t\t},\n\n\t\tload(id, ssr) {\n\t\t\tconst svelteRequest = requestParser(id, !!ssr);\n\t\t\tif (!svelteRequest) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlog.debug('load', svelteRequest);\n\t\t\tconst { filename, query } = svelteRequest;\n\n\t\t\t//\n\t\t\tif (query.svelte) {\n\t\t\t\tif (query.type === 'style') {\n\t\t\t\t\tconst css = cache.getCSS(svelteRequest);\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tlog.debug(`load returns css for ${filename}`);\n\t\t\t\t\t\treturn css;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tasync resolveId(importee, importer, customOptions, ssr) {\n\t\t\tconst svelteRequest = requestParser(importee, !!ssr);\n\t\t\tlog.debug('resolveId', svelteRequest || importee);\n\t\t\tif (svelteRequest?.query.svelte) {\n\t\t\t\tif (svelteRequest.query.type === 'style') {\n\t\t\t\t\t// return cssId with root prefix so postcss pipeline of vite finds the directory correctly\n\t\t\t\t\t// see https://github.com/sveltejs/vite-plugin-svelte/issues/14\n\t\t\t\t\tlog.debug(`resolveId resolved virtual css module ${svelteRequest.cssId}`);\n\t\t\t\t\treturn svelteRequest.cssId;\n\t\t\t\t}\n\t\t\t\tlog.debug(`resolveId resolved ${importee}`);\n\t\t\t\treturn importee; // query with svelte tag, an id we generated, no need for further analysis\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tconst resolved = resolveViaPackageJsonSvelte(importee, importer);\n\t\t\t\tif (resolved) {\n\t\t\t\t\tlog.debug(`resolveId resolved ${resolved} via package.json svelte field of ${importee}`);\n\t\t\t\t\treturn resolved;\n\t\t\t\t}\n\t\t\t} catch (err) {\n\t\t\t\tswitch (err.code) {\n\t\t\t\t\tcase 'ERR_PACKAGE_PATH_NOT_EXPORTED':\n\t\t\t\t\t\tpkg_export_errors.add(importee);\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tcase 'MODULE_NOT_FOUND':\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\tasync transform(code, id, ssr) {\n\t\t\tconst svelteRequest = requestParser(id, !!ssr);\n\t\t\tif (!svelteRequest) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlog.debug('transform', svelteRequest);\n\t\t\tconst { filename, query } = svelteRequest;\n\n\t\t\tif (query.svelte) {\n\t\t\t\tif (query.type === 'style') {\n\t\t\t\t\tconst css = cache.getCSS(svelteRequest);\n\t\t\t\t\tif (css) {\n\t\t\t\t\t\tlog.debug(`transform returns css for ${filename}`);\n\t\t\t\t\t\treturn css; // TODO return code arg instead? it's the code from load hook.\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tlog.error('failed to transform tagged svelte request', svelteRequest);\n\t\t\t\tthrow new Error(`failed to transform tagged svelte request for id ${id}`);\n\t\t\t}\n\t\t\tconst compileData = await compileSvelte(svelteRequest, code, options);\n\t\t\tlogCompilerWarnings(compileData.compiled.warnings, options);\n\t\t\tcache.update(compileData);\n\t\t\tif (compileData.dependencies?.length && options.server) {\n\t\t\t\tcompileData.dependencies.forEach((d) => this.addWatchFile(d));\n\t\t\t}\n\t\t\tlog.debug(`transform returns compiled js for ${filename}`);\n\t\t\treturn compileData.compiled.js;\n\t\t},\n\n\t\thandleHotUpdate(ctx: HmrContext): void | Promise<Array<ModuleNode> | void> {\n\t\t\tif (!options.emitCss || options.disableCssHmr) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst svelteRequest = requestParser(ctx.file, false, ctx.timestamp);\n\t\t\tif (!svelteRequest) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tlog.debug('handleHotUpdate', svelteRequest);\n\t\t\treturn handleHotUpdate(compileSvelte, ctx, svelteRequest, cache, options);\n\t\t},\n\n\t\t// eslint-disable-next-line no-unused-vars\n\t\ttransformIndexHtml(html: string, ctx: IndexHtmlTransformContext) {\n\t\t\t// TODO useful for ssr? and maybe svelte:head stuff\n\t\t\tlog.debug('transformIndexHtml', html);\n\t\t},\n\t\t/**\n\t\t * All resolutions done; display warnings wrt `package.json` access.\n\t\t */\n\t\t// TODO generateBundle isn't called by vite, is buildEnd enough or should it be logged once per violation in resolve\n\t\tbuildEnd() {\n\t\t\tif (pkg_export_errors.size > 0) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t`The following packages did not export their \\`package.json\\` file so we could not check the \"svelte\" field. If you had difficulties importing svelte components from a package, then please contact the author and ask them to export the package.json file.`,\n\t\t\t\t\tArray.from(pkg_export_errors, (s) => `- ${s}`).join('\\n')\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t};\n}\n\nexport {\n\tOptions,\n\tPreprocessor,\n\tPreprocessorGroup,\n\tCompileOptions,\n\tCssHashGetter,\n\tArrayable,\n\tMarkupPreprocessor,\n\tModuleFormat,\n\tProcessed,\n\tWarning\n} from './utils/options';\n", "/* eslint-disable no-unused-vars */\nimport chalk from 'chalk';\nimport debug from 'debug';\nimport { ResolvedOptions, Warning } from './options';\n\nconst levels: string[] = ['debug', 'info', 'warn', 'error', 'silent'];\nconst prefix = 'vite-plugin-svelte';\nconst loggers: { [key: string]: any } = {\n\tdebug: {\n\t\tlog: debug(`vite:${prefix}`),\n\t\tenabled: false,\n\t\tisDebug: true\n\t},\n\tinfo: {\n\t\tcolor: chalk.cyan,\n\t\tlog: console.log,\n\t\tenabled: true\n\t},\n\twarn: {\n\t\tcolor: chalk.yellow,\n\t\tlog: console.warn,\n\t\tenabled: true\n\t},\n\terror: {\n\t\tcolor: chalk.red,\n\t\tlog: console.error,\n\t\tenabled: true\n\t},\n\tsilent: {\n\t\tenabled: false\n\t}\n};\n\nlet _level: string = 'info';\nfunction setLevel(level: string) {\n\tif (level === _level) {\n\t\treturn;\n\t}\n\tconst levelIndex = levels.indexOf(level);\n\tif (levelIndex > -1) {\n\t\t_level = level;\n\t\tfor (let i = 0; i < levels.length; i++) {\n\t\t\tloggers[levels[i]].enabled = i >= levelIndex;\n\t\t}\n\t} else {\n\t\t_log(loggers.error, `invalid log level: ${level} `);\n\t}\n}\n\nlet _viteLogOverwriteProtection = false;\nfunction setViteLogOverwriteProtection(viteLogOverwriteProtection: boolean) {\n\t_viteLogOverwriteProtection = viteLogOverwriteProtection;\n}\n\nfunction _log(logger: any, message: string, payload?: any) {\n\tif (!logger.enabled) {\n\t\treturn;\n\t}\n\tif (logger.isDebug) {\n\t\tpayload !== undefined ? logger.log(message, payload) : logger.log(message);\n\t} else {\n\t\tlogger.log(logger.color(`[${prefix}] ${message}`));\n\t\tif (payload) {\n\t\t\tlogger.log(payload);\n\t\t}\n\t}\n\tif (_viteLogOverwriteProtection) {\n\t\tlogger.log('');\n\t}\n}\n\nexport interface LogFn {\n\t(message: string, payload?: any): void;\n\tenabled: boolean;\n}\n\nfunction createLogger(level: string): LogFn {\n\tconst logger = loggers[level];\n\tconst logFn: LogFn = _log.bind(null, logger) as LogFn;\n\tObject.defineProperty(logFn, 'enabled', {\n\t\tget() {\n\t\t\treturn logger.enabled;\n\t\t}\n\t});\n\treturn logFn;\n}\n\nexport const log = {\n\tdebug: createLogger('debug'),\n\tinfo: createLogger('info'),\n\twarn: createLogger('warn'),\n\terror: createLogger('error'),\n\tsetLevel,\n\n\t// TODO still needed?\n\tsetViteLogOverwriteProtection\n};\n\nexport function logCompilerWarnings(warnings: Warning[], options: ResolvedOptions) {\n\tconst { emitCss, onwarn, isBuild } = options;\n\tconst warn = isBuild ? warnBuild : warnDev;\n\twarnings?.forEach((warning) => {\n\t\tif (!emitCss && warning.code === 'css-unused-selector') {\n\t\t\treturn;\n\t\t}\n\t\tif (onwarn) {\n\t\t\tonwarn(warning, warn);\n\t\t} else {\n\t\t\twarn(warning);\n\t\t}\n\t});\n}\n\nfunction warnDev(w: Warning) {\n\tlog.info.enabled && log.info(buildExtendedLogMessage(w));\n}\n\nfunction warnBuild(w: Warning) {\n\tlog.warn.enabled && log.warn(buildExtendedLogMessage(w), w.frame);\n}\n\nfunction buildExtendedLogMessage(w: Warning) {\n\tconst parts = [];\n\tif (w.filename) {\n\t\tparts.push(w.filename);\n\t}\n\tif (w.start) {\n\t\tparts.push(':', w.start.line, ':', w.start.column);\n\t}\n\tif (w.message) {\n\t\tparts.push(' ', w.message);\n\t}\n\treturn parts.join('');\n}\n", "import { ModuleNode, HmrContext } from 'vite';\nimport { Code, CompileData } from './utils/compile';\nimport { log, logCompilerWarnings } from './utils/log';\nimport { SvelteRequest } from './utils/id';\nimport { VitePluginSvelteCache } from './utils/vite-plugin-svelte-cache';\nimport { ResolvedOptions } from './utils/options';\n\n/**\n * Vite-specific HMR handling\n */\nexport async function handleHotUpdate(\n\tcompileSvelte: Function,\n\tctx: HmrContext,\n\tsvelteRequest: SvelteRequest,\n\tcache: VitePluginSvelteCache,\n\toptions: ResolvedOptions\n): Promise<ModuleNode[] | void> {\n\tconst { read, server } = ctx;\n\n\tconst cachedJS = cache.getJS(svelteRequest);\n\tif (!cachedJS) {\n\t\t// file hasn't been requested yet (e.g. async component)\n\t\tlog.debug(`handleHotUpdate first call ${svelteRequest.id}`);\n\t\treturn;\n\t}\n\tconst cachedCss = cache.getCSS(svelteRequest);\n\n\tconst content = await read();\n\tconst compileData: CompileData = await compileSvelte(svelteRequest, content, options);\n\tcache.update(compileData);\n\n\tconst affectedModules = new Set<ModuleNode | undefined>();\n\n\tconst cssModule = server.moduleGraph.getModuleById(svelteRequest.cssId);\n\tconst mainModule = server.moduleGraph.getModuleById(svelteRequest.id);\n\tconst cssUpdated = cssModule && cssChanged(cachedCss, compileData.compiled.css);\n\tif (cssUpdated) {\n\t\tlog.debug('handleHotUpdate css changed');\n\t\taffectedModules.add(cssModule);\n\t}\n\tconst jsUpdated =\n\t\tmainModule && jsChanged(cachedJS, compileData.compiled.js, svelteRequest.filename);\n\tif (jsUpdated) {\n\t\tlog.debug('handleHotUpdate js changed');\n\t\taffectedModules.add(mainModule);\n\t}\n\n\tif (!jsUpdated) {\n\t\t// transform won't be called, log warnings here\n\t\tlogCompilerWarnings(compileData.compiled.warnings, options);\n\t}\n\n\tconst result = [...affectedModules].filter(Boolean) as ModuleNode[];\n\tlog.debug(`handleHotUpdate result for ${svelteRequest.id}`, result);\n\n\t// TODO is this enough? see also: https://github.com/vitejs/vite/issues/2274\n\tconst ssrModulesToInvalidate = result.filter((m) => !!m.ssrTransformResult);\n\tif (ssrModulesToInvalidate.length > 0) {\n\t\tlog.debug(`invalidating modules ${ssrModulesToInvalidate.map((m) => m.id).join(', ')}`);\n\t\tssrModulesToInvalidate.forEach((moduleNode) => server.moduleGraph.invalidateModule(moduleNode));\n\t}\n\n\treturn result;\n}\n\nfunction cssChanged(prev?: Code, next?: Code): boolean {\n\treturn !isCodeEqual(prev?.code, next?.code);\n}\n\nfunction jsChanged(prev?: Code, next?: Code, filename?: string): boolean {\n\tconst prevJs = prev?.code;\n\tconst nextJs = next?.code;\n\tconst isStrictEqual = isCodeEqual(prevJs, nextJs);\n\tif (isStrictEqual) {\n\t\treturn false;\n\t}\n\tconst isLooseEqual = isCodeEqual(normalizeJsCode(prevJs), normalizeJsCode(nextJs));\n\tif (!isStrictEqual && isLooseEqual) {\n\t\tlog.warn(\n\t\t\t`ignoring compiler output js change for ${filename} as it is equal to previous output after normalization`\n\t\t);\n\t}\n\treturn !isLooseEqual;\n}\n\nfunction isCodeEqual(prev?: string, next?: string): boolean {\n\tif (!prev && !next) {\n\t\treturn true;\n\t}\n\tif ((!prev && next) || (prev && !next)) {\n\t\treturn false;\n\t}\n\treturn prev === next;\n}\n\n/**\n * remove code that only changes metadata and does not require a js update for the component to keep working\n *\n * 1) add_location() calls. These add location metadata to elements, only useful for tooling like sapper studio\n * 2) ... maybe more (or less) in the future\n * @param code\n */\nfunction normalizeJsCode(code?: string): string | undefined {\n\tif (!code) {\n\t\treturn code;\n\t}\n\treturn code.replace(/\\s*\\badd_location\\s*\\([^)]*\\)\\s*;?/g, '');\n}\n", "import { CompileOptions, ResolvedOptions } from './options';\nimport { compile, preprocess, walk } from 'svelte/compiler';\n// @ts-ignore\nimport { createMakeHot } from 'svelte-hmr';\nimport { SvelteRequest } from './id';\nimport { safeBase64Hash } from './hash';\nimport { log } from './log';\n\nconst _createCompileSvelte = (makeHot: Function) =>\n\tasync function compileSvelte(\n\t\tsvelteRequest: SvelteRequest,\n\t\tcode: string,\n\t\toptions: Partial<ResolvedOptions>\n\t): Promise<CompileData> {\n\t\tconst { filename, normalizedFilename, cssId, ssr } = svelteRequest;\n\t\tconst { emitCss = true } = options;\n\t\tconst dependencies = [];\n\t\tconst finalCompilerOptions: CompileOptions = {\n\t\t\t...options.compilerOptions,\n\t\t\tfilename,\n\t\t\tgenerate: ssr ? 'ssr' : 'dom'\n\t\t};\n\t\tif (options.hot && options.emitCss) {\n\t\t\tconst hash = `s-${safeBase64Hash(normalizedFilename)}`;\n\t\t\tlog.debug(`setting cssHash ${hash} for ${normalizedFilename}`);\n\t\t\tfinalCompilerOptions.cssHash = () => hash;\n\t\t}\n\n\t\tlet preprocessed;\n\n\t\tif (options.preprocess) {\n\t\t\tpreprocessed = await preprocess(code, options.preprocess, { filename });\n\t\t\tif (preprocessed.dependencies) dependencies.push(...preprocessed.dependencies);\n\t\t\tif (preprocessed.map) finalCompilerOptions.sourcemap = preprocessed.map;\n\t\t}\n\n\t\tconst compiled = compile(preprocessed ? preprocessed.code : code, finalCompilerOptions);\n\n\t\tif (emitCss && compiled.css.code) {\n\t\t\t// TODO properly update sourcemap?\n\t\t\tcompiled.js.code += `\\nimport ${JSON.stringify(cssId)};\\n`;\n\t\t}\n\n\t\t// only apply hmr when not in ssr context and hot options are set\n\t\tif (!ssr && makeHot) {\n\t\t\tcompiled.js.code = makeHot({\n\t\t\t\tid: filename,\n\t\t\t\tcompiledCode: compiled.js.code,\n\t\t\t\thotOptions: options.hot,\n\t\t\t\tcompiled,\n\t\t\t\toriginalCode: code,\n\t\t\t\tcompileOptions: finalCompilerOptions\n\t\t\t});\n\t\t}\n\n\t\tcompiled.js.dependencies = dependencies;\n\n\t\treturn {\n\t\t\tfilename,\n\t\t\tnormalizedFilename,\n\t\t\tcompiled,\n\t\t\tssr,\n\t\t\tdependencies\n\t\t};\n\t};\n\nfunction buildMakeHot(options: ResolvedOptions) {\n\tconst needsMakeHot = options.hot !== false && options.isServe && !options.isProduction;\n\tif (needsMakeHot) {\n\t\t// @ts-ignore\n\t\tconst hotApi = options?.hot?.hotApi;\n\t\t// @ts-ignore\n\t\tconst adapter = options?.hot?.adapter;\n\t\treturn createMakeHot({\n\t\t\twalk,\n\t\t\thotApi,\n\t\t\tadapter,\n\t\t\thotOptions: { noOverlay: true, ...(options.hot as object) }\n\t\t});\n\t}\n}\n\nexport function createCompileSvelte(options: ResolvedOptions) {\n\tconst makeHot = buildMakeHot(options);\n\treturn _createCompileSvelte(makeHot);\n}\n\nexport interface Code {\n\tcode: string;\n\tmap?: any;\n\tdependencies?: any[];\n}\n\nexport interface Compiled {\n\tjs: Code;\n\tcss: Code;\n\tast: any; // TODO type\n\twarnings: any[]; // TODO type\n\tvars: {\n\t\tname: string;\n\t\texport_name: string;\n\t\tinjected: boolean;\n\t\tmodule: boolean;\n\t\tmutated: boolean;\n\t\treassigned: boolean;\n\t\treferenced: boolean;\n\t\twritable: boolean;\n\t\treferenced_from_script: boolean;\n\t}[];\n\tstats: {\n\t\ttimings: {\n\t\t\ttotal: number;\n\t\t};\n\t};\n}\n\nexport interface CompileData {\n\tfilename: string;\n\tnormalizedFilename: string;\n\tcompiled: Compiled;\n\tssr: boolean | undefined;\n\tdependencies: string[];\n}\n", "import * as crypto from 'crypto';\n\nconst hashes = Object.create(null);\n\n//TODO shorter?\nconst hash_length = 12;\n\nexport function safeBase64Hash(input: string) {\n\tif (hashes[input]) {\n\t\treturn hashes[input];\n\t}\n\t//TODO if performance really matters, use a faster one like xx-hash etc.\n\t// should be evenly distributed because short input length and similarities in paths could cause collisions otherwise\n\t// OR DON'T USE A HASH AT ALL, what about a simple counter?\n\tconst md5 = crypto.createHash('md5');\n\tmd5.update(input);\n\tconst hash = toSafe(md5.digest('base64')).substr(0, hash_length);\n\thashes[input] = hash;\n\treturn hash;\n}\n\nconst replacements: { [key: string]: string } = {\n\t'+': '-',\n\t'/': '_',\n\t'=': ''\n};\n\nconst replaceRE = new RegExp(`[${Object.keys(replacements).join('')}]`, 'g');\n\nfunction toSafe(base64: string) {\n\treturn base64.replace(replaceRE, (x) => replacements[x]);\n}\n", "/* eslint-disable no-unused-vars */\nimport qs from 'querystring';\nimport { createFilter } from '@rollup/pluginutils';\nimport { Arrayable, ResolvedOptions } from './options';\nimport { normalizePath } from 'vite';\nimport * as fs from 'fs';\n\nconst VITE_FS_PREFIX = '/@fs/';\nconst IS_WINDOWS = process.platform === 'win32';\nexport type SvelteQueryTypes = 'style' | 'script';\n\nexport interface SvelteQuery {\n\tsvelte?: boolean;\n\ttype?: SvelteQueryTypes;\n}\n\nexport interface SvelteRequest {\n\tid: string;\n\tcssId: string;\n\tfilename: string;\n\tnormalizedFilename: string;\n\tquery: SvelteQuery;\n\ttimestamp: number;\n\tssr: boolean;\n}\n\nfunction splitId(id: string) {\n\tconst parts = id.split(`?`, 2);\n\tconst filename = parts[0];\n\tconst rawQuery = parts[1];\n\treturn { filename, rawQuery };\n}\n\nfunction parseToSvelteRequest(\n\tid: string,\n\tfilename: string,\n\trawQuery: string,\n\troot: string,\n\ttimestamp: number,\n\tssr: boolean\n): SvelteRequest {\n\tconst query = qs.parse(rawQuery) as SvelteQuery;\n\tif (query.svelte != null) {\n\t\tquery.svelte = true;\n\t}\n\n\tconst normalizedFilename = normalize(filename, root);\n\tconst cssId = createVirtualImportId(filename, root, 'style');\n\n\treturn {\n\t\tid,\n\t\tfilename,\n\t\tnormalizedFilename,\n\t\tcssId,\n\t\tquery,\n\t\ttimestamp,\n\t\tssr\n\t};\n}\n\nfunction createVirtualImportId(filename: string, root: string, type: SvelteQueryTypes) {\n\tconst parts = ['svelte', `type=${type}`];\n\tif (type === 'style') {\n\t\tparts.push('lang.css');\n\t}\n\tif (existsInRoot(filename, root)) {\n\t\tfilename = root + filename;\n\t} else if (filename.startsWith(VITE_FS_PREFIX)) {\n\t\tfilename = IS_WINDOWS\n\t\t\t? filename.slice(VITE_FS_PREFIX.length) // remove /@fs/ from /@fs/C:/...\n\t\t\t: filename.slice(VITE_FS_PREFIX.length - 1); // remove /@fs from /@fs/home/user\n\t}\n\t// return same virtual id format as vite-plugin-vue eg ...App.svelte?svelte&type=style&lang.css\n\treturn `${filename}?${parts.join('&')}`;\n}\n\n/**\n * posixify and remove root at start\n *\n * @param filename\n * @param normalizedRoot\n */\nfunction normalize(filename: string, normalizedRoot: string) {\n\treturn stripRoot(normalizePath(filename), normalizedRoot);\n}\n\nfunction existsInRoot(filename: string, root: string) {\n\tif (filename.startsWith(VITE_FS_PREFIX)) {\n\t\treturn false; // vite already tagged it as out of root\n\t}\n\treturn fs.existsSync(root + filename);\n}\n\nfunction stripRoot(normalizedFilename: string, normalizedRoot: string) {\n\treturn normalizedFilename.startsWith(normalizedRoot + '/')\n\t\t? normalizedFilename.slice(normalizedRoot.length)\n\t\t: normalizedFilename;\n}\n\nfunction buildFilter(\n\tinclude: Arrayable<string> | undefined,\n\texclude: Arrayable<string> | undefined,\n\textensions: string[]\n): (filename: string) => boolean {\n\tconst rollupFilter = createFilter(include, exclude);\n\treturn (filename) => rollupFilter(filename) && extensions.some((ext) => filename.endsWith(ext));\n}\n\nexport type IdParser = (id: string, ssr: boolean, timestamp?: number) => SvelteRequest | undefined;\nexport function buildIdParser(options: ResolvedOptions): IdParser {\n\tconst { include, exclude, extensions, root } = options;\n\tconst normalizedRoot = normalizePath(root);\n\tconst filter = buildFilter(include, exclude, extensions!);\n\treturn (id, ssr, timestamp = Date.now()) => {\n\t\tconst { filename, rawQuery } = splitId(id);\n\t\tif (filter(filename)) {\n\t\t\treturn parseToSvelteRequest(id, filename, rawQuery, normalizedRoot, timestamp, ssr);\n\t\t}\n\t};\n}\n", "import path from 'path';\nimport fs from 'fs';\nimport { pathToFileURL } from 'url';\nimport { log } from './log';\nimport { Options } from './options';\nimport { ResolvedConfig } from 'vite';\n\nconst knownSvelteConfigNames = ['svelte.config.js', 'svelte.config.cjs', 'svelte.config.mjs'];\n\n// hide dynamic import from ts transform to prevent it turning into a require\n// see https://github.com/microsoft/TypeScript/issues/43329#issuecomment-811606238\nconst dynamicImportDefault = new Function('path', 'return import(path).then(m => m.default)');\n\nexport async function loadSvelteConfig(\n\tviteConfig: ResolvedConfig,\n\tinlineOptions: Partial<Options>\n) {\n\tconst configFile = findConfigToLoad(viteConfig, inlineOptions);\n\n\tif (configFile) {\n\t\tlet err;\n\t\t// try to use dynamic import for svelte.config.js first\n\t\tif (configFile.endsWith('.js') || configFile.endsWith('.mjs')) {\n\t\t\ttry {\n\t\t\t\treturn await dynamicImportDefault(pathToFileURL(configFile).href);\n\t\t\t} catch (e) {\n\t\t\t\tlog.error(`failed to import config ${configFile}`, e);\n\t\t\t\terr = e;\n\t\t\t}\n\t\t}\n\t\t// cjs or error with dynamic import\n\t\ttry {\n\t\t\treturn require(configFile);\n\t\t} catch (e) {\n\t\t\tlog.error(`failed to require config ${configFile}`, e);\n\t\t\tif (!err) {\n\t\t\t\terr = e;\n\t\t\t}\n\t\t}\n\t\t// failed to load existing config file\n\t\tthrow err;\n\t}\n}\n\nfunction findConfigToLoad(viteConfig: ResolvedConfig, inlineOptions: Partial<Options>) {\n\tconst root = viteConfig.root || process.cwd();\n\tif (inlineOptions.configFile) {\n\t\tconst abolutePath = path.isAbsolute(inlineOptions.configFile)\n\t\t\t? inlineOptions.configFile\n\t\t\t: path.resolve(root, inlineOptions.configFile);\n\t\tif (!fs.existsSync(abolutePath)) {\n\t\t\tthrow new Error(`failed to find svelte config file ${abolutePath}.`);\n\t\t}\n\t\treturn abolutePath;\n\t} else {\n\t\tconst existingKnownConfigFiles = knownSvelteConfigNames\n\t\t\t.map((candidate) => path.resolve(root, candidate))\n\t\t\t.filter((file) => fs.existsSync(file));\n\t\tif (existingKnownConfigFiles.length === 0) {\n\t\t\tlog.debug(`no svelte config found at ${root}`);\n\t\t\treturn;\n\t\t} else if (existingKnownConfigFiles.length > 1) {\n\t\t\tlog.warn(\n\t\t\t\t`found more than one svelte config file, using ${existingKnownConfigFiles[0]}. you should only have one!`,\n\t\t\t\texistingKnownConfigFiles\n\t\t\t);\n\t\t}\n\t\treturn existingKnownConfigFiles[0];\n\t}\n}\n", "import { ResolvedConfig, TransformResult } from 'vite';\nimport { Preprocessor, PreprocessorGroup, ResolvedOptions } from './options';\nimport { TransformPluginContext } from 'rollup';\nimport { log } from './log';\n\nconst supportedStyleLangs = ['css', 'less', 'sass', 'scss', 'styl', 'stylus', 'postcss'];\n\nconst supportedScriptLangs = ['ts'];\n\nfunction createPreprocessorFromVitePlugin(\n\tconfig: ResolvedConfig,\n\toptions: ResolvedOptions,\n\tpluginName: string,\n\tsupportedLangs: string[]\n): Preprocessor {\n\tconst plugin = config.plugins.find((p) => p.name === pluginName);\n\tif (!plugin) {\n\t\tthrow new Error(`failed to find plugin ${pluginName}`);\n\t}\n\tif (!plugin.transform) {\n\t\tthrow new Error(`plugin ${pluginName} has no transform`);\n\t}\n\tconst pluginTransform = plugin.transform!.bind(null as unknown as TransformPluginContext);\n\t// @ts-ignore\n\treturn async ({ attributes, content, filename }) => {\n\t\tconst lang = attributes.lang as string;\n\t\tif (!supportedLangs.includes(lang)) {\n\t\t\treturn { code: content };\n\t\t}\n\t\tconst moduleId = `${filename}.${lang}`;\n\t\tconst moduleGraph = options.server?.moduleGraph;\n\t\tif (moduleGraph && !moduleGraph.getModuleById(moduleId)) {\n\t\t\tawait moduleGraph.ensureEntryFromUrl(moduleId);\n\t\t}\n\t\tconst transformResult: TransformResult = (await pluginTransform(\n\t\t\tcontent,\n\t\t\tmoduleId\n\t\t)) as TransformResult;\n\t\t// TODO vite:css transform currently returns an empty mapping that would kill svelte compiler.\n\t\tconst hasMap = !!transformResult.map?.mappings;\n\t\tif (transformResult.map?.sources?.[0] === moduleId) {\n\t\t\ttransformResult.map.sources[0] = filename as string;\n\t\t}\n\t\treturn {\n\t\t\tcode: transformResult.code,\n\t\t\tmap: hasMap ? (transformResult.map as object) : null,\n\t\t\tdependencies: transformResult.deps\n\t\t};\n\t};\n}\n\nexport function createVitePreprocessorGroup(\n\tconfig: ResolvedConfig,\n\toptions: ResolvedOptions\n): PreprocessorGroup {\n\treturn {\n\t\tscript: createPreprocessorFromVitePlugin(config, options, 'vite:esbuild', supportedScriptLangs),\n\t\tstyle: createPreprocessorFromVitePlugin(config, options, 'vite:css', supportedStyleLangs)\n\t} as PreprocessorGroup;\n}\n\n/**\n * this appends a *{} rule to component styles to force the svelte compiler to add style classes to all nodes\n * That means adding/removing class rules from <style> node won't trigger js updates as the scope classes are not changed\n *\n * only used during dev with enabled css hmr\n */\nfunction createInjectScopeEverythingRulePreprocessorGroup(): PreprocessorGroup {\n\treturn {\n\t\tstyle({ content }) {\n\t\t\treturn {\n\t\t\t\tcode: `${content} *{}`\n\t\t\t};\n\t\t}\n\t};\n}\n\nfunction buildExtraPreprocessors(options: ResolvedOptions, config: ResolvedConfig) {\n\tconst extraPreprocessors = [];\n\tif (options.useVitePreprocess) {\n\t\tlog.debug('adding vite preprocessor');\n\t\textraPreprocessors.push(createVitePreprocessorGroup(config, options));\n\t}\n\n\tconst pluginsWithPreprocessors = config.plugins.filter((p) => p?.sveltePreprocess);\n\tif (pluginsWithPreprocessors.length > 0) {\n\t\tlog.debug(\n\t\t\t`adding preprocessors from other vite plugins: ${pluginsWithPreprocessors\n\t\t\t\t.map((p) => p.name)\n\t\t\t\t.join(', ')}`\n\t\t);\n\t\textraPreprocessors.push(\n\t\t\t...pluginsWithPreprocessors.map((p) => p.sveltePreprocess as PreprocessorGroup)\n\t\t);\n\t}\n\n\tif (options.hot && !options.disableCssHmr) {\n\t\textraPreprocessors.push(createInjectScopeEverythingRulePreprocessorGroup());\n\t}\n\n\treturn extraPreprocessors;\n}\n\nexport function addExtraPreprocessors(options: ResolvedOptions, config: ResolvedConfig) {\n\tconst extra = buildExtraPreprocessors(options, config);\n\tif (extra?.length > 0) {\n\t\tif (!options.preprocess) {\n\t\t\toptions.preprocess = extra;\n\t\t} else if (Array.isArray(options.preprocess)) {\n\t\t\toptions.preprocess.push(...extra);\n\t\t} else {\n\t\t\toptions.preprocess = [options.preprocess, ...extra];\n\t\t}\n\t}\n}\n", "/* eslint-disable no-unused-vars */\nimport { ResolvedConfig, ViteDevServer } from 'vite';\nimport { log } from './log';\nimport { loadSvelteConfig } from './load-svelte-config';\nimport { addExtraPreprocessors } from './preprocess';\n\nconst knownOptions = new Set([\n\t'configFile',\n\t'include',\n\t'exclude',\n\t'extensions',\n\t'emitCss',\n\t'compilerOptions',\n\t'onwarn',\n\t'preprocess',\n\t'hot',\n\t'disableCssHmr',\n\t'useVitePreprocess'\n]);\n\nfunction buildDefaultOptions(\n\t{ isProduction }: ResolvedConfig,\n\toptions: Partial<Options>\n): Partial<Options> {\n\tconst disableCssHmr = !!options?.disableCssHmr;\n\t// emit for prod, emit in dev unless css hmr is disabled\n\tconst emitCss = options?.emitCss != null ? options.emitCss : isProduction || !disableCssHmr;\n\t// no hmr in prod, only inject css in dev if emitCss is false\n\tconst hot = isProduction\n\t\t? false\n\t\t: {\n\t\t\t\tinjectCss: !emitCss\n\t\t  };\n\tconst defaultOptions: Partial<Options> = {\n\t\textensions: ['.svelte'],\n\t\thot,\n\t\temitCss,\n\t\tcompilerOptions: {\n\t\t\tformat: 'esm',\n\t\t\tcss: !emitCss,\n\t\t\tdev: !isProduction,\n\t\t\thydratable: true\n\t\t}\n\t};\n\tlog.debug(\n\t\t`default options for ${isProduction ? 'production' : 'development'} ${\n\t\t\t!isProduction && disableCssHmr ? ' with css hmr disabled' : ''\n\t\t}`,\n\t\tdefaultOptions\n\t);\n\treturn defaultOptions;\n}\n\nexport function validateInlineOptions(inlineOptions?: Partial<Options>) {\n\tconst invalidKeys = Object.keys(inlineOptions || {}).filter((key) => !knownOptions.has(key));\n\tif (invalidKeys.length) {\n\t\tlog.warn(`invalid plugin options \"${invalidKeys.join(', ')}\" in config`, inlineOptions);\n\t}\n}\n\nfunction enforceOptionsForHmr(options: ResolvedOptions) {\n\tif (options.hot) {\n\t\tif (!options.compilerOptions.dev) {\n\t\t\tlog.warn('hmr is enabled but compilerOptions.dev is false, forcing it to true');\n\t\t\toptions.compilerOptions.dev = true;\n\t\t}\n\t\tif (options.emitCss) {\n\t\t\tif (options.hot !== true && options.hot.injectCss) {\n\t\t\t\tlog.warn('hmr and emitCss are enabled but hot.injectCss is true, forcing it to false');\n\t\t\t\toptions.hot.injectCss = false;\n\t\t\t}\n\t\t\tif (options.compilerOptions.css) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t'hmr and emitCss are enabled but compilerOptions.css is true, forcing it to false'\n\t\t\t\t);\n\t\t\t\toptions.compilerOptions.css = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (options.hot === true || !options.hot.injectCss) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t'hmr with emitCss disabled requires option hot.injectCss to be enabled, forcing it to true'\n\t\t\t\t);\n\t\t\t\tif (options.hot === true) {\n\t\t\t\t\toptions.hot = { injectCss: true };\n\t\t\t\t} else {\n\t\t\t\t\toptions.hot.injectCss = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!options.compilerOptions.css) {\n\t\t\t\tlog.warn(\n\t\t\t\t\t'hmr with emitCss disabled requires compilerOptions.css to be enabled, forcing it to true'\n\t\t\t\t);\n\t\t\t\toptions.compilerOptions.css = true;\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction enforceOptionsForProduction(options: ResolvedOptions) {\n\tif (options.isProduction) {\n\t\tif (options.hot) {\n\t\t\tlog.warn('options.hot is enabled but does not work on production build, forcing it to false');\n\t\t\toptions.hot = false;\n\t\t}\n\t\tif (options.compilerOptions.dev) {\n\t\t\tlog.warn(\n\t\t\t\t'you are building for production but compilerOptions.dev is true, forcing it to false'\n\t\t\t);\n\t\t\toptions.compilerOptions.dev = false;\n\t\t}\n\t}\n}\n\nfunction mergeOptions(\n\tdefaultOptions: Partial<Options>,\n\tsvelteConfig: Partial<Options>,\n\tinlineOptions: Partial<Options>,\n\tviteConfig: ResolvedConfig\n): ResolvedOptions {\n\treturn {\n\t\t...defaultOptions,\n\t\t...svelteConfig,\n\t\t...inlineOptions,\n\t\tcompilerOptions: {\n\t\t\t...defaultOptions.compilerOptions,\n\t\t\t...(svelteConfig?.compilerOptions || {}),\n\t\t\t...(inlineOptions?.compilerOptions || {})\n\t\t},\n\t\troot: viteConfig.root,\n\t\tisProduction: viteConfig.isProduction,\n\t\tisBuild: viteConfig.command === 'build',\n\t\tisServe: viteConfig.command === 'serve'\n\t};\n}\n\nexport async function resolveOptions(\n\tinlineOptions: Partial<Options> = {},\n\tviteConfig: ResolvedConfig\n): Promise<ResolvedOptions> {\n\tconst defaultOptions = buildDefaultOptions(viteConfig, inlineOptions);\n\tconst svelteConfig = (await loadSvelteConfig(viteConfig, inlineOptions)) || {};\n\tconst resolvedOptions = mergeOptions(defaultOptions, svelteConfig, inlineOptions, viteConfig);\n\n\tenforceOptionsForProduction(resolvedOptions);\n\n\tenforceOptionsForHmr(resolvedOptions);\n\n\taddExtraPreprocessors(resolvedOptions, viteConfig);\n\tlog.debug('resolved options', resolvedOptions);\n\treturn resolvedOptions;\n}\n\nexport interface Options {\n\t// eslint-disable no-unused-vars\n\t/** path to svelte config file, either absolute or relative to vite root*/\n\tconfigFile?: string;\n\n\t/** One or more minimatch patterns */\n\tinclude?: Arrayable<string>;\n\n\t/** One or more minimatch patterns */\n\texclude?: Arrayable<string>;\n\n\t/**\n\t * By default, all \".svelte\" files are compiled\n\t * @default ['.svelte']\n\t */\n\textensions?: string[];\n\n\t/**\n\t * Optionally, preprocess components with svelte.preprocess:\n\t * \\@see https://svelte.dev/docs#svelte_preprocess\n\t */\n\tpreprocess?: Arrayable<PreprocessorGroup>;\n\n\t/** Emit Svelte styles as virtual CSS files for other plugins to process.\n\t * @default true\n\t */\n\temitCss?: boolean;\n\n\t/** Options passed to `svelte.compile` method. */\n\tcompilerOptions: Partial<CompileOptions>;\n\n\t/**\n\t * custom warning handler for svelte compiler warnings\n\t */\n\tonwarn?: (warning: Warning, defaultHandler?: (warning: Warning) => void) => void;\n\n\t/**\n\t * enable/disable hmr. You want this enabled.\n\t *\n\t * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t * DO NOT CUSTOMIZE SVELTE-HMR OPTIONS UNLESS YOU KNOW EXACTLY WHAT YOU ARE DOING\n\t *\n\t *                             YOU HAVE BEEN WARNED\n\t * !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\t *\n\t * @default true for development, always false for production\n\t */\n\thot?:\n\t\t| undefined\n\t\t| boolean\n\t\t| {\n\t\t\t\t// svelte-hmr options\n\t\t\t\t/**\n\t\t\t\t * preserve all local state\n\t\t\t\t * @default false\n\t\t\t\t */\n\t\t\t\tpreserveLocalState?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * escape hatchs from preservation of local state\n\t\t\t\t * disable preservation of state for this component\n\t\t\t\t *\n\t\t\t\t * @default ['\\@hmr:reset', '\\@!hmr']\n\t\t\t\t */\n\t\t\t\tnoPreserveStateKey?: string[];\n\n\t\t\t\t/**\n\t\t\t\t * enable preservation of state for all variables in this component\n\t\t\t\t *\n\t\t\t\t * @default '\\@hmr:keep-all'\n\t\t\t\t */\n\t\t\t\tpreserveAllLocalStateKey?: string;\n\n\t\t\t\t/**\n\t\t\t\t * enable preservation of state for a given variable (must be inline or\n\t\t\t\t * above the target variable or variables; can be repeated)\n\t\t\t\t *\n\t\t\t\t * @default '\\@hmr:keep'\n\t\t\t\t */\n\t\t\t\tpreserveLocalStateKey?: string;\n\n\t\t\t\t/**\n\t\t\t\t * don't reload on fatal error\n\t\t\t\t *\n\t\t\t\t * @default false\n\t\t\t\t */\n\t\t\t\tnoReload?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * try to recover after runtime errors during component init\n\t\t\t\t *\n\t\t\t\t * @default true\n\t\t\t\t */\n\t\t\t\toptimistic?: boolean;\n\t\t\t\t/**\n\t\t\t\t * auto accept modules of components that have named exports (i.e. exports\n\t\t\t\t * from context=\"module\")\n\t\t\t\t *\n\t\t\t\t * @default true\n\t\t\t\t */\n\t\t\t\tacceptNamedExports?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * auto accept modules of components have accessors (either accessors compile\n\t\t\t\t * option, or \\<svelte:option accessors=\\{true\\} /\\>) -- this means that if you\n\t\t\t\t * set accessors compile option globally, you must also set this option to\n\t\t\t\t * true, or no component will be hot reloaded (but there are a lot of edge\n\t\t\t\t * cases that HMR can't support correctly with accessors)\n\t\t\t\t *\n\t\t\t\t * @default true\n\t\t\t\t */\n\t\t\t\tacceptAccessors?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * only inject CSS instead of recreating components when only CSS changes\n\t\t\t\t *\n\t\t\t\t * @default true, but vite-plugin-svelte configures this automatically according to emitCss requirements\n\t\t\t\t */\n\t\t\t\tinjectCss?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * to mitigate FOUC between dispose (remove stylesheet) and accept\n\t\t\t\t *\n\t\t\t\t * note: has no effect when emitCss is true (vite-plugin-svelte default)\n\t\t\t\t * @default 100\n\t\t\t\t */\n\t\t\t\tcssEjectDelay?: number;\n\n\t\t\t\t//\n\t\t\t\t/**\n\t\t\t\t * Svelte Native mode\n\t\t\t\t *\n\t\t\t\t * @default false\n\t\t\t\t */\n\t\t\t\tnative?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * name of the adapter import binding\n\t\t\t\t *\n\t\t\t\t * @default '___SVELTE_HMR_HOT_API_PROXY_ADAPTER'\n\t\t\t\t */\n\t\t\t\timportAdapterName?: string;\n\t\t\t\t/**\n\t\t\t\t * use absolute file paths to import runtime deps of svelte-hmr\n\t\t\t\t * (see https://github.com/rixo/svelte-hmr/issues/11)\n\t\t\t\t *\n\t\t\t\t * @default true\n\t\t\t\t */\n\t\t\t\tabsoluteImports?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * disable runtime error overlay\n\t\t\t\t *\n\t\t\t\t * @default false\n\t\t\t\t */\n\t\t\t\tnoOverlay?: boolean;\n\n\t\t\t\t/**\n\t\t\t\t * custom import path for hotApi\n\t\t\t\t */\n\t\t\t\thotApi?: string;\n\t\t\t\t/**\n\t\t\t\t * custom path for adapter\n\t\t\t\t */\n\t\t\t\tadapter?: string;\n\t\t  };\n\t/**\n\t * disable separate hmr update for css files via vite\n\t * @default false\n\t */\n\tdisableCssHmr?: boolean;\n\n\t/**\n\t * use vite as extra css preprocessor EXPERIMENTAL!\n\t * @default false\n\t */\n\tuseVitePreprocess?: boolean;\n}\n\nexport interface ResolvedOptions extends Options {\n\troot: string;\n\tisProduction: boolean;\n\tisBuild?: boolean;\n\tisServe?: boolean;\n\tserver?: ViteDevServer;\n}\n\n// TODO import from appropriate places\nexport declare type ModuleFormat = 'esm' | 'cjs';\n\nexport interface CompileOptions {\n\tformat?: ModuleFormat;\n\tname?: string;\n\tfilename?: string;\n\tgenerate?: 'dom' | 'ssr' | false;\n\tsourcemap?: object | string;\n\toutputFilename?: string;\n\tcssOutputFilename?: string;\n\tsveltePath?: string;\n\tdev?: boolean;\n\taccessors?: boolean;\n\timmutable?: boolean;\n\thydratable?: boolean;\n\tlegacy?: boolean;\n\tcustomElement?: boolean;\n\ttag?: string;\n\tcss?: boolean;\n\tloopGuardTimeout?: number;\n\tnamespace?: string;\n\tpreserveComments?: boolean;\n\tpreserveWhitespace?: boolean;\n\tcssHash?: CssHashGetter;\n}\n\nexport interface Processed {\n\tcode: string;\n\tmap?: string | object;\n\tdependencies?: string[];\n\ttoString?: () => string;\n}\n\nexport declare type CssHashGetter = (args: {\n\tname: string;\n\tfilename: string | undefined;\n\tcss: string;\n\thash: (input: string) => string;\n}) => string;\n\nexport declare type MarkupPreprocessor = (options: {\n\tcontent: string;\n\tfilename: string;\n}) => Processed | Promise<Processed>;\n\nexport declare type Preprocessor = (options: {\n\tcontent: string;\n\tattributes: Record<string, string | boolean>;\n\tfilename?: string;\n}) => Processed | Promise<Processed>;\n\nexport interface PreprocessorGroup {\n\tmarkup?: MarkupPreprocessor;\n\tstyle?: Preprocessor;\n\tscript?: Preprocessor;\n}\n\nexport type Arrayable<T> = T | T[];\n\nexport interface Warning {\n\tstart?: {\n\t\tline: number;\n\t\tcolumn: number;\n\t\tpos?: number;\n\t};\n\tend?: {\n\t\tline: number;\n\t\tcolumn: number;\n\t};\n\tpos?: number;\n\tcode: string;\n\tmessage: string;\n\tfilename?: string;\n\tframe?: string;\n\ttoString: () => string;\n}\n", "import { SvelteRequest } from './id';\nimport { Code, CompileData } from './compile';\n\nexport class VitePluginSvelteCache {\n\tprivate _css = new Map<string, Code>();\n\tprivate _js = new Map<string, Code>();\n\tprivate _dependencies = new Map<string, string[]>();\n\tprivate _dependants = new Map<string, Set<string>>();\n\n\tpublic update(compileData: CompileData) {\n\t\tthis.updateCSS(compileData);\n\t\tthis.updateJS(compileData);\n\t\tthis.updateDependencies(compileData);\n\t}\n\n\tprivate updateCSS(compileData: CompileData) {\n\t\tthis._css.set(compileData.normalizedFilename, compileData.compiled.css);\n\t}\n\n\tprivate updateJS(compileData: CompileData) {\n\t\tif (!compileData.ssr) {\n\t\t\t// do not cache SSR js\n\t\t\tthis._js.set(compileData.normalizedFilename, compileData.compiled.js);\n\t\t}\n\t}\n\n\tprivate updateDependencies(compileData: CompileData) {\n\t\tconst id = compileData.normalizedFilename;\n\t\tconst prevDependencies = this._dependencies.get(id) || [];\n\t\tconst dependencies = compileData.dependencies;\n\t\tthis._dependencies.set(id, dependencies);\n\t\tconst removed = prevDependencies.filter((d) => !dependencies.includes(d));\n\t\tconst added = dependencies.filter((d) => !prevDependencies.includes(d));\n\t\tadded.forEach((d) => {\n\t\t\tif (!this._dependants.has(d)) {\n\t\t\t\tthis._dependants.set(d, new Set<string>());\n\t\t\t}\n\t\t\tthis._dependants.get(d)!.add(compileData.filename);\n\t\t});\n\t\tremoved.forEach((d) => {\n\t\t\tthis._dependants.get(d)!.delete(compileData.filename);\n\t\t});\n\t}\n\n\tpublic remove(svelteRequest: SvelteRequest): boolean {\n\t\tconst id = svelteRequest.normalizedFilename;\n\t\tlet removed = false;\n\t\tif (this._js.delete(id)) {\n\t\t\tremoved = true;\n\t\t}\n\t\tif (this._css.delete(id)) {\n\t\t\tremoved = true;\n\t\t}\n\t\tconst dependencies = this._dependencies.get(id);\n\t\tif (dependencies) {\n\t\t\tremoved = true;\n\t\t\tdependencies.forEach((d) => {\n\t\t\t\tconst dependants = this._dependants.get(d);\n\t\t\t\tif (dependants && dependants.has(svelteRequest.filename)) {\n\t\t\t\t\tdependants.delete(svelteRequest.filename);\n\t\t\t\t}\n\t\t\t});\n\t\t\tthis._dependencies.delete(id);\n\t\t}\n\t\treturn removed;\n\t}\n\n\tpublic getCSS(svelteRequest: SvelteRequest) {\n\t\treturn this._css.get(svelteRequest.normalizedFilename);\n\t}\n\n\tpublic getJS(svelteRequest: SvelteRequest) {\n\t\tif (!svelteRequest.ssr) {\n\t\t\t// SSR js isn't cached\n\t\t\treturn this._js.get(svelteRequest.normalizedFilename);\n\t\t}\n\t}\n\n\tpublic getDependants(path: string): string[] {\n\t\tconst dependants = this._dependants.get(path);\n\t\treturn dependants ? [...dependants] : [];\n\t}\n}\n", "const VITE_RESOLVE_MAIN_FIELDS = ['module', 'jsnext:main', 'jsnext'];\n\nexport const SVELTE_RESOLVE_MAIN_FIELDS = ['svelte', ...VITE_RESOLVE_MAIN_FIELDS];\n\nexport const SVELTE_IMPORTS = [\n\t'svelte/animate',\n\t'svelte/easing',\n\t'svelte/internal',\n\t'svelte/motion',\n\t'svelte/store',\n\t'svelte/transition',\n\t'svelte',\n\t'svelte-hmr/runtime/hot-api-esm.js',\n\t'svelte-hmr/runtime/proxy-adapter-dom.js',\n\t'svelte-hmr'\n];\n", "import { ViteDevServer } from 'vite';\nimport { VitePluginSvelteCache } from './vite-plugin-svelte-cache';\nimport fs from 'fs';\nimport { log } from './log';\nimport { IdParser } from './id';\n\nexport function setupWatchers(\n\tserver: ViteDevServer,\n\tcache: VitePluginSvelteCache,\n\trequestParser: IdParser\n) {\n\tconst watcher = server.watcher;\n\n\tconst emitChangeEventOnDependants = (filename: string) => {\n\t\tconst dependants = cache.getDependants(filename);\n\t\tdependants.forEach((dependant) => {\n\t\t\tif (fs.existsSync(dependant)) {\n\t\t\t\tlog.debug(\n\t\t\t\t\t`emitting virtual change event for \"${dependant}\" because depdendency \"${filename}\" changed`\n\t\t\t\t);\n\t\t\t\twatcher.emit('change', dependant);\n\t\t\t}\n\t\t});\n\t};\n\n\tconst removeUnlinkedFromCache = (filename: string) => {\n\t\tconst svelteRequest = requestParser(filename, false);\n\t\tif (svelteRequest) {\n\t\t\tconst removedFromCache = cache.remove(svelteRequest);\n\t\t\tif (removedFromCache) {\n\t\t\t\tlog.debug(`cleared VitePluginSvelteCache for deleted file ${filename}`);\n\t\t\t}\n\t\t}\n\t};\n\n\twatcher.on('change', emitChangeEventOnDependants);\n\twatcher.on('unlink', (filename) => {\n\t\tremoveUnlinkedFromCache(filename);\n\t\temitChangeEventOnDependants(filename);\n\t});\n}\n", "import path from 'path';\nimport fs from 'fs';\n// @ts-ignore\nimport relative from 'require-relative';\n\nexport function resolveViaPackageJsonSvelte(importee: string, importer?: string): string | void {\n\tif (importer && isBareImport(importee)) {\n\t\tconst importeePkgFile = relative.resolve(`${importee}/package.json`, path.dirname(importer));\n\t\tconst importeePkg = JSON.parse(fs.readFileSync(importeePkgFile, { encoding: 'utf-8' }));\n\t\tif (importeePkg.svelte) {\n\t\t\treturn path.resolve(path.dirname(importeePkgFile), importeePkg.svelte);\n\t\t}\n\t}\n}\n\nfunction isBareImport(importee: string): boolean {\n\tif (!importee || importee[0] === '.' || importee[0] === '\\0' || path.isAbsolute(importee)) {\n\t\treturn false;\n\t}\n\tconst parts = importee.split('/');\n\tswitch (parts.length) {\n\t\tcase 1:\n\t\t\treturn true;\n\t\tcase 2:\n\t\t\treturn parts[0].startsWith('@');\n\t\tdefault:\n\t\t\treturn false;\n\t}\n}\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;;;ACCA,mBAAkB;AAClB,mBAAkB;AAGlB,IAAM,SAAmB,CAAC,SAAS,QAAQ,QAAQ,SAAS;AAC5D,IAAM,SAAS;AACf,IAAM,UAAkC;AAAA,EACvC,OAAO;AAAA,IACN,KAAK,0BAAM,QAAQ;AAAA,IACnB,SAAS;AAAA,IACT,SAAS;AAAA;AAAA,EAEV,MAAM;AAAA,IACL,OAAO,qBAAM;AAAA,IACb,KAAK,QAAQ;AAAA,IACb,SAAS;AAAA;AAAA,EAEV,MAAM;AAAA,IACL,OAAO,qBAAM;AAAA,IACb,KAAK,QAAQ;AAAA,IACb,SAAS;AAAA;AAAA,EAEV,OAAO;AAAA,IACN,OAAO,qBAAM;AAAA,IACb,KAAK,QAAQ;AAAA,IACb,SAAS;AAAA;AAAA,EAEV,QAAQ;AAAA,IACP,SAAS;AAAA;AAAA;AAIX,IAAI,SAAiB;AACrB,kBAAkB,OAAe;AAChC,MAAI,UAAU,QAAQ;AACrB;AAAA;AAED,QAAM,aAAa,OAAO,QAAQ;AAClC,MAAI,aAAa,IAAI;AACpB,aAAS;AACT,aAAS,IAAI,GAAG,IAAI,OAAO,QAAQ,KAAK;AACvC,cAAQ,OAAO,IAAI,UAAU,KAAK;AAAA;AAAA,SAE7B;AACN,SAAK,QAAQ,OAAO,sBAAsB;AAAA;AAAA;AAI5C,IAAI,8BAA8B;AAClC,uCAAuC,4BAAqC;AAC3E,gCAA8B;AAAA;AAG/B,cAAc,QAAa,SAAiB,SAAe;AAC1D,MAAI,CAAC,OAAO,SAAS;AACpB;AAAA;AAED,MAAI,OAAO,SAAS;AACnB,gBAAY,SAAY,OAAO,IAAI,SAAS,WAAW,OAAO,IAAI;AAAA,SAC5D;AACN,WAAO,IAAI,OAAO,MAAM,IAAI,WAAW;AACvC,QAAI,SAAS;AACZ,aAAO,IAAI;AAAA;AAAA;AAGb,MAAI,6BAA6B;AAChC,WAAO,IAAI;AAAA;AAAA;AASb,sBAAsB,OAAsB;AAC3C,QAAM,SAAS,QAAQ;AACvB,QAAM,QAAe,KAAK,KAAK,MAAM;AACrC,SAAO,eAAe,OAAO,WAAW;AAAA,IACvC,MAAM;AACL,aAAO,OAAO;AAAA;AAAA;AAGhB,SAAO;AAAA;AAGD,IAAM,MAAM;AAAA,EAClB,OAAO,aAAa;AAAA,EACpB,MAAM,aAAa;AAAA,EACnB,MAAM,aAAa;AAAA,EACnB,OAAO,aAAa;AAAA,EACpB;AAAA,EAGA;AAAA;AAGM,6BAA6B,UAAqB,SAA0B;AAClF,QAAM,EAAE,SAAS,QAAQ,YAAY;AACrC,QAAM,OAAO,UAAU,YAAY;AACnC,uCAAU,QAAQ,CAAC,YAAY;AAC9B,QAAI,CAAC,WAAW,QAAQ,SAAS,uBAAuB;AACvD;AAAA;AAED,QAAI,QAAQ;AACX,aAAO,SAAS;AAAA,WACV;AACN,WAAK;AAAA;AAAA;AAAA;AAKR,iBAAiB,GAAY;AAC5B,MAAI,KAAK,WAAW,IAAI,KAAK,wBAAwB;AAAA;AAGtD,mBAAmB,GAAY;AAC9B,MAAI,KAAK,WAAW,IAAI,KAAK,wBAAwB,IAAI,EAAE;AAAA;AAG5D,iCAAiC,GAAY;AAC5C,QAAM,QAAQ;AACd,MAAI,EAAE,UAAU;AACf,UAAM,KAAK,EAAE;AAAA;AAEd,MAAI,EAAE,OAAO;AACZ,UAAM,KAAK,KAAK,EAAE,MAAM,MAAM,KAAK,EAAE,MAAM;AAAA;AAE5C,MAAI,EAAE,SAAS;AACd,UAAM,KAAK,KAAK,EAAE;AAAA;AAEnB,SAAO,MAAM,KAAK;AAAA;;;AC1HnB,+BACC,eACA,KACA,eACA,OACA,SAC+B;AAC/B,QAAM,EAAE,MAAM,WAAW;AAEzB,QAAM,WAAW,MAAM,MAAM;AAC7B,MAAI,CAAC,UAAU;AAEd,QAAI,MAAM,8BAA8B,cAAc;AACtD;AAAA;AAED,QAAM,YAAY,MAAM,OAAO;AAE/B,QAAM,UAAU,MAAM;AACtB,QAAM,cAA2B,MAAM,cAAc,eAAe,SAAS;AAC7E,QAAM,OAAO;AAEb,QAAM,kBAAkB,IAAI;AAE5B,QAAM,YAAY,OAAO,YAAY,cAAc,cAAc;AACjE,QAAM,aAAa,OAAO,YAAY,cAAc,cAAc;AAClE,QAAM,aAAa,aAAa,WAAW,WAAW,YAAY,SAAS;AAC3E,MAAI,YAAY;AACf,QAAI,MAAM;AACV,oBAAgB,IAAI;AAAA;AAErB,QAAM,YACL,cAAc,UAAU,UAAU,YAAY,SAAS,IAAI,cAAc;AAC1E,MAAI,WAAW;AACd,QAAI,MAAM;AACV,oBAAgB,IAAI;AAAA;AAGrB,MAAI,CAAC,WAAW;AAEf,wBAAoB,YAAY,SAAS,UAAU;AAAA;AAGpD,QAAM,SAAS,CAAC,GAAG,iBAAiB,OAAO;AAC3C,MAAI,MAAM,8BAA8B,cAAc,MAAM;AAG5D,QAAM,yBAAyB,OAAO,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;AACxD,MAAI,uBAAuB,SAAS,GAAG;AACtC,QAAI,MAAM,wBAAwB,uBAAuB,IAAI,CAAC,MAAM,EAAE,IAAI,KAAK;AAC/E,2BAAuB,QAAQ,CAAC,eAAe,OAAO,YAAY,iBAAiB;AAAA;AAGpF,SAAO;AAAA;AAGR,oBAAoB,MAAa,MAAsB;AACtD,SAAO,CAAC,YAAY,6BAAM,MAAM,6BAAM;AAAA;AAGvC,mBAAmB,MAAa,MAAa,UAA4B;AACxE,QAAM,SAAS,6BAAM;AACrB,QAAM,SAAS,6BAAM;AACrB,QAAM,gBAAgB,YAAY,QAAQ;AAC1C,MAAI,eAAe;AAClB,WAAO;AAAA;AAER,QAAM,eAAe,YAAY,gBAAgB,SAAS,gBAAgB;AAC1E,MAAI,CAAC,iBAAiB,cAAc;AACnC,QAAI,KACH,0CAA0C;AAAA;AAG5C,SAAO,CAAC;AAAA;AAGT,qBAAqB,MAAe,MAAwB;AAC3D,MAAI,CAAC,QAAQ,CAAC,MAAM;AACnB,WAAO;AAAA;AAER,MAAK,CAAC,QAAQ,QAAU,QAAQ,CAAC,MAAO;AACvC,WAAO;AAAA;AAER,SAAO,SAAS;AAAA;AAUjB,yBAAyB,MAAmC;AAC3D,MAAI,CAAC,MAAM;AACV,WAAO;AAAA;AAER,SAAO,KAAK,QAAQ,uCAAuC;AAAA;;;ACzG5D,sBAA0C;AAE1C,wBAA8B;;;ACH9B,aAAwB;AAExB,IAAM,SAAS,OAAO,OAAO;AAG7B,IAAM,cAAc;AAEb,wBAAwB,OAAe;AAC7C,MAAI,OAAO,QAAQ;AAClB,WAAO,OAAO;AAAA;AAKf,QAAM,MAAM,AAAO,kBAAW;AAC9B,MAAI,OAAO;AACX,QAAM,OAAO,OAAO,IAAI,OAAO,WAAW,OAAO,GAAG;AACpD,SAAO,SAAS;AAChB,SAAO;AAAA;AAGR,IAAM,eAA0C;AAAA,EAC/C,KAAK;AAAA,EACL,KAAK;AAAA,EACL,KAAK;AAAA;AAGN,IAAM,YAAY,IAAI,OAAO,IAAI,OAAO,KAAK,cAAc,KAAK,QAAQ;AAExE,gBAAgB,QAAgB;AAC/B,SAAO,OAAO,QAAQ,WAAW,CAAC,MAAM,aAAa;AAAA;;;ADtBtD,IAAM,uBAAuB,CAAC,YAC7B,6BACC,eACA,MACA,SACuB;AACvB,QAAM,EAAE,UAAU,oBAAoB,OAAO,QAAQ;AACrD,QAAM,EAAE,UAAU,SAAS;AAC3B,QAAM,eAAe;AACrB,QAAM,uBAAuC,iCACzC,QAAQ,kBADiC;AAAA,IAE5C;AAAA,IACA,UAAU,MAAM,QAAQ;AAAA;AAEzB,MAAI,QAAQ,OAAO,QAAQ,SAAS;AACnC,UAAM,OAAO,KAAK,eAAe;AACjC,QAAI,MAAM,mBAAmB,YAAY;AACzC,yBAAqB,UAAU,MAAM;AAAA;AAGtC,MAAI;AAEJ,MAAI,QAAQ,YAAY;AACvB,mBAAe,MAAM,gCAAW,MAAM,QAAQ,YAAY,EAAE;AAC5D,QAAI,aAAa;AAAc,mBAAa,KAAK,GAAG,aAAa;AACjE,QAAI,aAAa;AAAK,2BAAqB,YAAY,aAAa;AAAA;AAGrE,QAAM,WAAW,6BAAQ,eAAe,aAAa,OAAO,MAAM;AAElE,MAAI,WAAW,SAAS,IAAI,MAAM;AAEjC,aAAS,GAAG,QAAQ;AAAA,SAAY,KAAK,UAAU;AAAA;AAAA;AAIhD,MAAI,CAAC,OAAO,SAAS;AACpB,aAAS,GAAG,OAAO,QAAQ;AAAA,MAC1B,IAAI;AAAA,MACJ,cAAc,SAAS,GAAG;AAAA,MAC1B,YAAY,QAAQ;AAAA,MACpB;AAAA,MACA,cAAc;AAAA,MACd,gBAAgB;AAAA;AAAA;AAIlB,WAAS,GAAG,eAAe;AAE3B,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIH,sBAAsB,SAA0B;AAlEhD;AAmEC,QAAM,eAAe,QAAQ,QAAQ,SAAS,QAAQ,WAAW,CAAC,QAAQ;AAC1E,MAAI,cAAc;AAEjB,UAAM,SAAS,yCAAS,QAAT,mBAAc;AAE7B,UAAM,UAAU,yCAAS,QAAT,mBAAc;AAC9B,WAAO,qCAAc;AAAA,MACpB;AAAA,MACA;AAAA,MACA;AAAA,MACA,YAAY,iBAAE,WAAW,QAAU,QAAQ;AAAA;AAAA;AAAA;AAKvC,6BAA6B,SAA0B;AAC7D,QAAM,UAAU,aAAa;AAC7B,SAAO,qBAAqB;AAAA;;;AEnF7B,yBAAe;AACf,yBAA6B;AAE7B,kBAA8B;AAC9B,SAAoB;AAEpB,IAAM,iBAAiB;AACvB,IAAM,aAAa,QAAQ,aAAa;AAkBxC,iBAAiB,IAAY;AAC5B,QAAM,QAAQ,GAAG,MAAM,KAAK;AAC5B,QAAM,WAAW,MAAM;AACvB,QAAM,WAAW,MAAM;AACvB,SAAO,EAAE,UAAU;AAAA;AAGpB,8BACC,IACA,UACA,UACA,MACA,WACA,KACgB;AAChB,QAAM,QAAQ,2BAAG,MAAM;AACvB,MAAI,MAAM,UAAU,MAAM;AACzB,UAAM,SAAS;AAAA;AAGhB,QAAM,qBAAqB,UAAU,UAAU;AAC/C,QAAM,QAAQ,sBAAsB,UAAU,MAAM;AAEpD,SAAO;AAAA,IACN;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA;AAAA;AAIF,+BAA+B,UAAkB,MAAc,MAAwB;AACtF,QAAM,QAAQ,CAAC,UAAU,QAAQ;AACjC,MAAI,SAAS,SAAS;AACrB,UAAM,KAAK;AAAA;AAEZ,MAAI,aAAa,UAAU,OAAO;AACjC,eAAW,OAAO;AAAA,aACR,SAAS,WAAW,iBAAiB;AAC/C,eAAW,aACR,SAAS,MAAM,eAAe,UAC9B,SAAS,MAAM,eAAe,SAAS;AAAA;AAG3C,SAAO,GAAG,YAAY,MAAM,KAAK;AAAA;AASlC,mBAAmB,UAAkB,gBAAwB;AAC5D,SAAO,UAAU,+BAAc,WAAW;AAAA;AAG3C,sBAAsB,UAAkB,MAAc;AACrD,MAAI,SAAS,WAAW,iBAAiB;AACxC,WAAO;AAAA;AAER,SAAO,AAAG,cAAW,OAAO;AAAA;AAG7B,mBAAmB,oBAA4B,gBAAwB;AACtE,SAAO,mBAAmB,WAAW,iBAAiB,OACnD,mBAAmB,MAAM,eAAe,UACxC;AAAA;AAGJ,qBACC,SACA,SACA,YACgC;AAChC,QAAM,eAAe,qCAAa,SAAS;AAC3C,SAAO,CAAC,aAAa,aAAa,aAAa,WAAW,KAAK,CAAC,QAAQ,SAAS,SAAS;AAAA;AAIpF,uBAAuB,SAAoC;AACjE,QAAM,EAAE,SAAS,SAAS,YAAY,SAAS;AAC/C,QAAM,iBAAiB,+BAAc;AACrC,QAAM,SAAS,YAAY,SAAS,SAAS;AAC7C,SAAO,CAAC,IAAI,KAAK,YAAY,KAAK,UAAU;AAC3C,UAAM,EAAE,UAAU,aAAa,QAAQ;AACvC,QAAI,OAAO,WAAW;AACrB,aAAO,qBAAqB,IAAI,UAAU,UAAU,gBAAgB,WAAW;AAAA;AAAA;AAAA;;;ACpHlF,kBAAiB;AACjB,gBAAe;AACf,iBAA8B;AAK9B,IAAM,yBAAyB,CAAC,oBAAoB,qBAAqB;AAIzE,IAAM,uBAAuB,IAAI,SAAS,QAAQ;AAElD,gCACC,YACA,eACC;AACD,QAAM,aAAa,iBAAiB,YAAY;AAEhD,MAAI,YAAY;AACf,QAAI;AAEJ,QAAI,WAAW,SAAS,UAAU,WAAW,SAAS,SAAS;AAC9D,UAAI;AACH,eAAO,MAAM,qBAAqB,8BAAc,YAAY;AAAA,eACpD,GAAP;AACD,YAAI,MAAM,2BAA2B,cAAc;AACnD,cAAM;AAAA;AAAA;AAIR,QAAI;AACH,aAAO,QAAQ;AAAA,aACP,GAAP;AACD,UAAI,MAAM,4BAA4B,cAAc;AACpD,UAAI,CAAC,KAAK;AACT,cAAM;AAAA;AAAA;AAIR,UAAM;AAAA;AAAA;AAIR,0BAA0B,YAA4B,eAAiC;AACtF,QAAM,OAAO,WAAW,QAAQ,QAAQ;AACxC,MAAI,cAAc,YAAY;AAC7B,UAAM,cAAc,oBAAK,WAAW,cAAc,cAC/C,cAAc,aACd,oBAAK,QAAQ,MAAM,cAAc;AACpC,QAAI,CAAC,kBAAG,WAAW,cAAc;AAChC,YAAM,IAAI,MAAM,qCAAqC;AAAA;AAEtD,WAAO;AAAA,SACD;AACN,UAAM,2BAA2B,uBAC/B,IAAI,CAAC,cAAc,oBAAK,QAAQ,MAAM,YACtC,OAAO,CAAC,SAAS,kBAAG,WAAW;AACjC,QAAI,yBAAyB,WAAW,GAAG;AAC1C,UAAI,MAAM,6BAA6B;AACvC;AAAA,eACU,yBAAyB,SAAS,GAAG;AAC/C,UAAI,KACH,iDAAiD,yBAAyB,iCAC1E;AAAA;AAGF,WAAO,yBAAyB;AAAA;AAAA;;;AC9DlC,IAAM,sBAAsB,CAAC,OAAO,QAAQ,QAAQ,QAAQ,QAAQ,UAAU;AAE9E,IAAM,uBAAuB,CAAC;AAE9B,0CACC,QACA,SACA,YACA,gBACe;AACf,QAAM,SAAS,OAAO,QAAQ,KAAK,CAAC,MAAM,EAAE,SAAS;AACrD,MAAI,CAAC,QAAQ;AACZ,UAAM,IAAI,MAAM,yBAAyB;AAAA;AAE1C,MAAI,CAAC,OAAO,WAAW;AACtB,UAAM,IAAI,MAAM,UAAU;AAAA;AAE3B,QAAM,kBAAkB,OAAO,UAAW,KAAK;AAE/C,SAAO,OAAO,EAAE,YAAY,SAAS,eAAe;AAxBrD;AAyBE,UAAM,OAAO,WAAW;AACxB,QAAI,CAAC,eAAe,SAAS,OAAO;AACnC,aAAO,EAAE,MAAM;AAAA;AAEhB,UAAM,WAAW,GAAG,YAAY;AAChC,UAAM,cAAc,cAAQ,WAAR,mBAAgB;AACpC,QAAI,eAAe,CAAC,YAAY,cAAc,WAAW;AACxD,YAAM,YAAY,mBAAmB;AAAA;AAEtC,UAAM,kBAAoC,MAAM,gBAC/C,SACA;AAGD,UAAM,SAAS,CAAC,CAAC,uBAAgB,QAAhB,mBAAqB;AACtC,QAAI,6BAAgB,QAAhB,mBAAqB,YAArB,mBAA+B,QAAO,UAAU;AACnD,sBAAgB,IAAI,QAAQ,KAAK;AAAA;AAElC,WAAO;AAAA,MACN,MAAM,gBAAgB;AAAA,MACtB,KAAK,SAAU,gBAAgB,MAAiB;AAAA,MAChD,cAAc,gBAAgB;AAAA;AAAA;AAAA;AAK1B,qCACN,QACA,SACoB;AACpB,SAAO;AAAA,IACN,QAAQ,iCAAiC,QAAQ,SAAS,gBAAgB;AAAA,IAC1E,OAAO,iCAAiC,QAAQ,SAAS,YAAY;AAAA;AAAA;AAUvE,4DAA+E;AAC9E,SAAO;AAAA,IACN,MAAM,EAAE,WAAW;AAClB,aAAO;AAAA,QACN,MAAM,GAAG;AAAA;AAAA;AAAA;AAAA;AAMb,iCAAiC,SAA0B,QAAwB;AAClF,QAAM,qBAAqB;AAC3B,MAAI,QAAQ,mBAAmB;AAC9B,QAAI,MAAM;AACV,uBAAmB,KAAK,4BAA4B,QAAQ;AAAA;AAG7D,QAAM,2BAA2B,OAAO,QAAQ,OAAO,CAAC,MAAM,uBAAG;AACjE,MAAI,yBAAyB,SAAS,GAAG;AACxC,QAAI,MACH,iDAAiD,yBAC/C,IAAI,CAAC,MAAM,EAAE,MACb,KAAK;AAER,uBAAmB,KAClB,GAAG,yBAAyB,IAAI,CAAC,MAAM,EAAE;AAAA;AAI3C,MAAI,QAAQ,OAAO,CAAC,QAAQ,eAAe;AAC1C,uBAAmB,KAAK;AAAA;AAGzB,SAAO;AAAA;AAGD,+BAA+B,SAA0B,QAAwB;AACvF,QAAM,QAAQ,wBAAwB,SAAS;AAC/C,MAAI,gCAAO,UAAS,GAAG;AACtB,QAAI,CAAC,QAAQ,YAAY;AACxB,cAAQ,aAAa;AAAA,eACX,MAAM,QAAQ,QAAQ,aAAa;AAC7C,cAAQ,WAAW,KAAK,GAAG;AAAA,WACrB;AACN,cAAQ,aAAa,CAAC,QAAQ,YAAY,GAAG;AAAA;AAAA;AAAA;;;ACzGhD,IAAM,eAAe,IAAI,IAAI;AAAA,EAC5B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;AAGD,6BACC,EAAE,gBACF,SACmB;AACnB,QAAM,gBAAgB,CAAC,CAAC,oCAAS;AAEjC,QAAM,UAAU,oCAAS,YAAW,OAAO,QAAQ,UAAU,gBAAgB,CAAC;AAE9E,QAAM,MAAM,eACT,QACA;AAAA,IACA,WAAW,CAAC;AAAA;AAEf,QAAM,iBAAmC;AAAA,IACxC,YAAY,CAAC;AAAA,IACb;AAAA,IACA;AAAA,IACA,iBAAiB;AAAA,MAChB,QAAQ;AAAA,MACR,KAAK,CAAC;AAAA,MACN,KAAK,CAAC;AAAA,MACN,YAAY;AAAA;AAAA;AAGd,MAAI,MACH,uBAAuB,eAAe,eAAe,iBACpD,CAAC,gBAAgB,gBAAgB,2BAA2B,MAE7D;AAED,SAAO;AAAA;AAGD,+BAA+B,eAAkC;AACvE,QAAM,cAAc,OAAO,KAAK,iBAAiB,IAAI,OAAO,CAAC,QAAQ,CAAC,aAAa,IAAI;AACvF,MAAI,YAAY,QAAQ;AACvB,QAAI,KAAK,2BAA2B,YAAY,KAAK,oBAAoB;AAAA;AAAA;AAI3E,8BAA8B,SAA0B;AACvD,MAAI,QAAQ,KAAK;AAChB,QAAI,CAAC,QAAQ,gBAAgB,KAAK;AACjC,UAAI,KAAK;AACT,cAAQ,gBAAgB,MAAM;AAAA;AAE/B,QAAI,QAAQ,SAAS;AACpB,UAAI,QAAQ,QAAQ,QAAQ,QAAQ,IAAI,WAAW;AAClD,YAAI,KAAK;AACT,gBAAQ,IAAI,YAAY;AAAA;AAEzB,UAAI,QAAQ,gBAAgB,KAAK;AAChC,YAAI,KACH;AAED,gBAAQ,gBAAgB,MAAM;AAAA;AAAA,WAEzB;AACN,UAAI,QAAQ,QAAQ,QAAQ,CAAC,QAAQ,IAAI,WAAW;AACnD,YAAI,KACH;AAED,YAAI,QAAQ,QAAQ,MAAM;AACzB,kBAAQ,MAAM,EAAE,WAAW;AAAA,eACrB;AACN,kBAAQ,IAAI,YAAY;AAAA;AAAA;AAG1B,UAAI,CAAC,QAAQ,gBAAgB,KAAK;AACjC,YAAI,KACH;AAED,gBAAQ,gBAAgB,MAAM;AAAA;AAAA;AAAA;AAAA;AAMlC,qCAAqC,SAA0B;AAC9D,MAAI,QAAQ,cAAc;AACzB,QAAI,QAAQ,KAAK;AAChB,UAAI,KAAK;AACT,cAAQ,MAAM;AAAA;AAEf,QAAI,QAAQ,gBAAgB,KAAK;AAChC,UAAI,KACH;AAED,cAAQ,gBAAgB,MAAM;AAAA;AAAA;AAAA;AAKjC,sBACC,gBACA,cACA,eACA,YACkB;AAClB,SAAO,+DACH,iBACA,eACA,gBAHG;AAAA,IAIN,iBAAiB,iDACb,eAAe,kBACd,8CAAc,oBAAmB,KACjC,gDAAe,oBAAmB;AAAA,IAEvC,MAAM,WAAW;AAAA,IACjB,cAAc,WAAW;AAAA,IACzB,SAAS,WAAW,YAAY;AAAA,IAChC,SAAS,WAAW,YAAY;AAAA;AAAA;AAIlC,8BACC,gBAAkC,IAClC,YAC2B;AAC3B,QAAM,iBAAiB,oBAAoB,YAAY;AACvD,QAAM,eAAgB,MAAM,iBAAiB,YAAY,kBAAmB;AAC5E,QAAM,kBAAkB,aAAa,gBAAgB,cAAc,eAAe;AAElF,8BAA4B;AAE5B,uBAAqB;AAErB,wBAAsB,iBAAiB;AACvC,MAAI,MAAM,oBAAoB;AAC9B,SAAO;AAAA;;;AClJD,kCAA4B;AAAA,EAA5B,cAHP;AAIS,gBAAO,IAAI;AACX,eAAM,IAAI;AACV,yBAAgB,IAAI;AACpB,uBAAc,IAAI;AAAA;AAAA,EAEnB,OAAO,aAA0B;AACvC,SAAK,UAAU;AACf,SAAK,SAAS;AACd,SAAK,mBAAmB;AAAA;AAAA,EAGjB,UAAU,aAA0B;AAC3C,SAAK,KAAK,IAAI,YAAY,oBAAoB,YAAY,SAAS;AAAA;AAAA,EAG5D,SAAS,aAA0B;AAC1C,QAAI,CAAC,YAAY,KAAK;AAErB,WAAK,IAAI,IAAI,YAAY,oBAAoB,YAAY,SAAS;AAAA;AAAA;AAAA,EAI5D,mBAAmB,aAA0B;AACpD,UAAM,KAAK,YAAY;AACvB,UAAM,mBAAmB,KAAK,cAAc,IAAI,OAAO;AACvD,UAAM,eAAe,YAAY;AACjC,SAAK,cAAc,IAAI,IAAI;AAC3B,UAAM,UAAU,iBAAiB,OAAO,CAAC,MAAM,CAAC,aAAa,SAAS;AACtE,UAAM,QAAQ,aAAa,OAAO,CAAC,MAAM,CAAC,iBAAiB,SAAS;AACpE,UAAM,QAAQ,CAAC,MAAM;AACpB,UAAI,CAAC,KAAK,YAAY,IAAI,IAAI;AAC7B,aAAK,YAAY,IAAI,GAAG,IAAI;AAAA;AAE7B,WAAK,YAAY,IAAI,GAAI,IAAI,YAAY;AAAA;AAE1C,YAAQ,QAAQ,CAAC,MAAM;AACtB,WAAK,YAAY,IAAI,GAAI,OAAO,YAAY;AAAA;AAAA;AAAA,EAIvC,OAAO,eAAuC;AACpD,UAAM,KAAK,cAAc;AACzB,QAAI,UAAU;AACd,QAAI,KAAK,IAAI,OAAO,KAAK;AACxB,gBAAU;AAAA;AAEX,QAAI,KAAK,KAAK,OAAO,KAAK;AACzB,gBAAU;AAAA;AAEX,UAAM,eAAe,KAAK,cAAc,IAAI;AAC5C,QAAI,cAAc;AACjB,gBAAU;AACV,mBAAa,QAAQ,CAAC,MAAM;AAC3B,cAAM,aAAa,KAAK,YAAY,IAAI;AACxC,YAAI,cAAc,WAAW,IAAI,cAAc,WAAW;AACzD,qBAAW,OAAO,cAAc;AAAA;AAAA;AAGlC,WAAK,cAAc,OAAO;AAAA;AAE3B,WAAO;AAAA;AAAA,EAGD,OAAO,eAA8B;AAC3C,WAAO,KAAK,KAAK,IAAI,cAAc;AAAA;AAAA,EAG7B,MAAM,eAA8B;AAC1C,QAAI,CAAC,cAAc,KAAK;AAEvB,aAAO,KAAK,IAAI,IAAI,cAAc;AAAA;AAAA;AAAA,EAI7B,cAAc,OAAwB;AAC5C,UAAM,aAAa,KAAK,YAAY,IAAI;AACxC,WAAO,aAAa,CAAC,GAAG,cAAc;AAAA;AAAA;;;AChFxC,IAAM,2BAA2B,CAAC,UAAU,eAAe;AAEpD,IAAM,6BAA6B,CAAC,UAAU,GAAG;AAEjD,IAAM,iBAAiB;AAAA,EAC7B;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA;;;ACZD,iBAAe;AAIR,uBACN,QACA,OACA,eACC;AACD,QAAM,UAAU,OAAO;AAEvB,QAAM,8BAA8B,CAAC,aAAqB;AACzD,UAAM,aAAa,MAAM,cAAc;AACvC,eAAW,QAAQ,CAAC,cAAc;AACjC,UAAI,mBAAG,WAAW,YAAY;AAC7B,YAAI,MACH,sCAAsC,mCAAmC;AAE1E,gBAAQ,KAAK,UAAU;AAAA;AAAA;AAAA;AAK1B,QAAM,0BAA0B,CAAC,aAAqB;AACrD,UAAM,gBAAgB,cAAc,UAAU;AAC9C,QAAI,eAAe;AAClB,YAAM,mBAAmB,MAAM,OAAO;AACtC,UAAI,kBAAkB;AACrB,YAAI,MAAM,kDAAkD;AAAA;AAAA;AAAA;AAK/D,UAAQ,GAAG,UAAU;AACrB,UAAQ,GAAG,UAAU,CAAC,aAAa;AAClC,4BAAwB;AACxB,gCAA4B;AAAA;AAAA;;;ACtC9B,mBAAiB;AACjB,iBAAe;AAEf,8BAAqB;AAEd,qCAAqC,UAAkB,UAAkC;AAC/F,MAAI,YAAY,aAAa,WAAW;AACvC,UAAM,kBAAkB,gCAAS,QAAQ,GAAG,yBAAyB,qBAAK,QAAQ;AAClF,UAAM,cAAc,KAAK,MAAM,mBAAG,aAAa,iBAAiB,EAAE,UAAU;AAC5E,QAAI,YAAY,QAAQ;AACvB,aAAO,qBAAK,QAAQ,qBAAK,QAAQ,kBAAkB,YAAY;AAAA;AAAA;AAAA;AAKlE,sBAAsB,UAA2B;AAChD,MAAI,CAAC,YAAY,SAAS,OAAO,OAAO,SAAS,OAAO,QAAQ,qBAAK,WAAW,WAAW;AAC1F,WAAO;AAAA;AAER,QAAM,QAAQ,SAAS,MAAM;AAC7B,UAAQ,MAAM;AAAA,SACR;AACJ,aAAO;AAAA,SACH;AACJ,aAAO,MAAM,GAAG,WAAW;AAAA;AAE3B,aAAO;AAAA;AAAA;;;AZAH,gBAAgB,eAA0C;AAChE,MAAI,QAAQ,IAAI,SAAS,MAAM;AAC9B,QAAI,SAAS;AAAA;AAEd,wBAAsB;AACtB,QAAM,QAAQ,IAAI;AAClB,QAAM,oBAAoB,IAAI;AAE9B,MAAI;AACJ,MAAI;AAGJ,MAAI;AAOJ,SAAO;AAAA,IACN,MAAM;AAAA,IAEN,SAAS;AAAA,IACT,OAAO,QAA6B;AAEnC,UAAI,QAAQ,IAAI,OAAO;AACtB,YAAI,SAAS;AAAA,iBACH,OAAO,UAAU;AAC3B,YAAI,SAAS,OAAO;AAAA;AAIrB,YAAM,kBAAuC;AAAA,QAC5C,cAAc;AAAA,UACb,SAAS,CAAC,GAAG;AAAA;AAAA,QAEd,SAAS;AAAA,UACR,YAAY,CAAC,GAAG;AAAA,UAChB,QAAQ,CAAC,GAAG;AAAA;AAAA;AAKd,UAAI,+CAAe,mBAAmB;AACrC,wBAAgB,UAAU;AAAA,UACzB,aAAa;AAAA,YACZ,iBAAiB;AAAA,cAChB,wBAAwB;AAAA;AAAA;AAAA;AAAA;AAK5B,UAAI,MAAM,0BAA0B;AACpC,aAAO;AAAA;AAAA,UAGF,eAAe,QAAQ;AAC5B,gBAAU,MAAM,eAAe,eAAe;AAC9C,sBAAgB,cAAc;AAC9B,sBAAgB,oBAAoB;AAAA;AAAA,IAGrC,gBAAgB,QAAQ;AAEvB,cAAQ,SAAS;AACjB,oBAAc,QAAQ,OAAO;AAAA;AAAA,IAG9B,KAAK,IAAI,KAAK;AACb,YAAM,gBAAgB,cAAc,IAAI,CAAC,CAAC;AAC1C,UAAI,CAAC,eAAe;AACnB;AAAA;AAGD,UAAI,MAAM,QAAQ;AAClB,YAAM,EAAE,UAAU,UAAU;AAG5B,UAAI,MAAM,QAAQ;AACjB,YAAI,MAAM,SAAS,SAAS;AAC3B,gBAAM,MAAM,MAAM,OAAO;AACzB,cAAI,KAAK;AACR,gBAAI,MAAM,wBAAwB;AAClC,mBAAO;AAAA;AAAA;AAAA;AAAA;AAAA,UAML,UAAU,UAAU,UAAU,eAAe,KAAK;AACvD,YAAM,gBAAgB,cAAc,UAAU,CAAC,CAAC;AAChD,UAAI,MAAM,aAAa,iBAAiB;AACxC,UAAI,+CAAe,MAAM,QAAQ;AAChC,YAAI,cAAc,MAAM,SAAS,SAAS;AAGzC,cAAI,MAAM,yCAAyC,cAAc;AACjE,iBAAO,cAAc;AAAA;AAEtB,YAAI,MAAM,sBAAsB;AAChC,eAAO;AAAA;AAGR,UAAI;AACH,cAAM,WAAW,4BAA4B,UAAU;AACvD,YAAI,UAAU;AACb,cAAI,MAAM,sBAAsB,6CAA6C;AAC7E,iBAAO;AAAA;AAAA,eAEA,KAAP;AACD,gBAAQ,IAAI;AAAA,eACN;AACJ,8BAAkB,IAAI;AACtB,mBAAO;AAAA,eACH;AACJ,mBAAO;AAAA;AAEP,kBAAM;AAAA;AAAA;AAAA;AAAA,UAKJ,UAAU,MAAM,IAAI,KAAK;AApJjC;AAqJG,YAAM,gBAAgB,cAAc,IAAI,CAAC,CAAC;AAC1C,UAAI,CAAC,eAAe;AACnB;AAAA;AAED,UAAI,MAAM,aAAa;AACvB,YAAM,EAAE,UAAU,UAAU;AAE5B,UAAI,MAAM,QAAQ;AACjB,YAAI,MAAM,SAAS,SAAS;AAC3B,gBAAM,MAAM,MAAM,OAAO;AACzB,cAAI,KAAK;AACR,gBAAI,MAAM,6BAA6B;AACvC,mBAAO;AAAA;AAAA;AAGT,YAAI,MAAM,6CAA6C;AACvD,cAAM,IAAI,MAAM,oDAAoD;AAAA;AAErE,YAAM,cAAc,MAAM,cAAc,eAAe,MAAM;AAC7D,0BAAoB,YAAY,SAAS,UAAU;AACnD,YAAM,OAAO;AACb,UAAI,mBAAY,iBAAZ,mBAA0B,WAAU,QAAQ,QAAQ;AACvD,oBAAY,aAAa,QAAQ,CAAC,MAAM,KAAK,aAAa;AAAA;AAE3D,UAAI,MAAM,qCAAqC;AAC/C,aAAO,YAAY,SAAS;AAAA;AAAA,IAG7B,gBAAgB,KAA2D;AAC1E,UAAI,CAAC,QAAQ,WAAW,QAAQ,eAAe;AAC9C;AAAA;AAED,YAAM,gBAAgB,cAAc,IAAI,MAAM,OAAO,IAAI;AACzD,UAAI,CAAC,eAAe;AACnB;AAAA;AAED,UAAI,MAAM,mBAAmB;AAC7B,aAAO,gBAAgB,eAAe,KAAK,eAAe,OAAO;AAAA;AAAA,IAIlE,mBAAmB,MAAc,KAAgC;AAEhE,UAAI,MAAM,sBAAsB;AAAA;AAAA,IAMjC,WAAW;AACV,UAAI,kBAAkB,OAAO,GAAG;AAC/B,YAAI,KACH,gQACA,MAAM,KAAK,mBAAmB,CAAC,MAAM,KAAK,KAAK,KAAK;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
